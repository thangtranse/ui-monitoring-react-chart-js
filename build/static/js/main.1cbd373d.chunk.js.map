{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["rp","require","cheerio","options","scales","yAxes","ticks","beginAtZero","checkObject","App","useState","txtHeader","setTxtHeader","dataChart","setDataChart","dataChartLine","setDataChartLine","dataChartLineW","setDataChartLineW","dataChartColorC","setDataChartColorC","dataChartColorP","setDataChartColorP","dataChartColorW","setDataChartColorW","checkValueReload","setValueReload","nameDetail","setNameDetail","WDetail","setWDetail","KHDetail","setKHDetail","useEffect","interval","setInterval","then","html","$","load","timeNow","Date","textResult","length","console","log","toLocaleString","textSpeedCPUs","filter","index","data","loadHtmlRaw","text","test","split","dataObjectSpeed","forEach","slice","lastIndexOf","trim","parseFloat","push","converTextToArray","replace","RegExp","headerList","dataResultC","dataResultP","dataResultW","dataResultColorC","dataResultColorP","dataResultColorW","dataRaw","dataH","indexOf","dataC","dataD","dataW","dataSpeed","dataTime","time","toLocaleTimeString","parseIntC","catch","err","clearInterval","className","Grid","container","item","xs","md","labels","datasets","label","backgroundColor","direction","justify","alignItems","map","fill","borderColor","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1cbd373d.chunk.js","sourcesContent":["import Grid from '@material-ui/core/Grid';\nimport React, { useEffect, useState } from 'react';\nimport { Bar, Line } from 'react-chartjs-2';\nimport './App.css';\n\nconst rp = require('request-promise');\nconst url = 'http://192.168.200.151:3333';\n// const url = 'http://127.0.0.1:5500/192.168.200.151.html';\n\nconst cheerio = require('cheerio')\n\nconst options = {\n  scales: {\n    yAxes: [\n      {\n        ticks: {\n          beginAtZero: true,\n        },\n      },\n    ],\n  },\n};\n\nlet checkObject = {}\n\nfunction App() {\n\n  const [txtHeader, setTxtHeader] = useState([]);\n\n  const [dataChart, setDataChart] = useState([]);\n  const [dataChartLine, setDataChartLine] = useState([]);\n  const [dataChartLineW, setDataChartLineW] = useState([]);\n\n  const [dataChartColorC, setDataChartColorC] = useState([]);\n  const [dataChartColorP, setDataChartColorP] = useState([\"\"]);\n  const [dataChartColorW, setDataChartColorW] = useState([\"\"]);\n\n  const [checkValueReload, setValueReload] = useState(\"\");\n\n  const [nameDetail, setNameDetail] = useState(\"\");\n  const [WDetail, setWDetail] = useState(\"\");\n  const [KHDetail, setKHDetail] = useState(\"\");\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      rp(url)\n        .then(function (html) {\n          //success!\n          const $ = cheerio.load(html)\n          const timeNow = new Date()\n\n          let textResult = $($('font[color=#FF55FF]')[`${$('font[color=#FF55FF]').length - 1}`]).html()\n\n          console.log(timeNow.toLocaleString() + \" _ Crawl CPUs Infor:\", textResult)\n\n          let textSpeedCPUs = $('font[color=#55FFFF]').filter((index, data) => {\n            const loadHtmlRaw = cheerio.load(data).text()\n            if (/(^[G][P][U][s][:])/g.test(loadHtmlRaw)) {\n              return data\n            }\n          })\n          textSpeedCPUs = cheerio.load(textSpeedCPUs[textSpeedCPUs.length - 1]).text()\n\n          console.log(timeNow.toLocaleString() + \" _ Crawl CPUs Speed:\", textSpeedCPUs)\n\n          textSpeedCPUs = textSpeedCPUs.split(\" MH/s\")\n          let dataObjectSpeed = [] // Chứa tổng số MH/s của CPUs theo thứ tự từ 1 -> n++\n          textSpeedCPUs.forEach((data, index) => {\n            data = data.slice(data.lastIndexOf(\":\") + 1,)\n            data = data.trim()\n            data = parseFloat(data)\n            if (data) {\n              console.log(\"data\", data)\n\n              dataObjectSpeed.push(data)\n            }\n          })\n\n          textResult = textResult.replace(new RegExp(\"<br>\\n\", \"gm\"), \",\")\n\n          let converTextToArray = textResult.split(\",\")\n          let headerList = [],\n            dataResultC = [],\n            dataResultP = [],\n            dataResultW = [],\n            dataResultColorC = [],\n            dataResultColorP = [],\n            dataResultColorW = [];\n\n          converTextToArray.forEach((data, index) => {\n            const dataRaw = data.trim()\n            if (index === (converTextToArray.length - 1)) {\n              let dataH = dataRaw.slice(0, dataRaw.indexOf(\":\"))\n              setNameDetail(dataH)\n              setWDetail(dataRaw.slice(dataRaw.indexOf(\":\") + 1, dataRaw.indexOf(\"W\") + 1).trim())\n              setKHDetail(dataRaw.slice(dataRaw.indexOf(\";\") + 1, dataRaw.indexOf(\"J\") + 1).trim())\n            } else {\n\n              let dataH = dataRaw.slice(0, dataRaw.indexOf(\":\"))\n              let dataC = dataRaw.slice(dataRaw.indexOf(\":\") + 1, dataRaw.indexOf(\"C\"))\n              let dataD = dataRaw.slice(dataRaw.indexOf(\"C\") + 1, dataRaw.indexOf(\"%\"))\n              let dataW = dataRaw.slice(dataRaw.indexOf(\"%\") + 1, dataRaw.indexOf(\"W\"))\n\n              if (!checkObject[dataH]) {\n                checkObject[dataH] = {\n                  ...checkObject[dataH],\n                  data: [dataObjectSpeed[index]],\n                  time: [timeNow.toLocaleTimeString()]\n                }\n              } else {\n                let dataSpeed = checkObject[dataH].data\n                dataSpeed.push(dataObjectSpeed[index])\n                let dataTime = checkObject[dataH].time\n                dataTime.push(timeNow.toLocaleTimeString())\n                checkObject[dataH] = {\n                  ...checkObject[dataH],\n                  data: dataSpeed,\n                  time: dataTime\n                }\n              }\n\n              headerList.push(dataH)\n              dataResultC.push(dataC.trim())\n              dataResultP.push(dataD.trim())\n              dataResultW.push(dataW.trim())\n\n              const parseIntC = dataC.trim()\n              if (parseIntC > 65 && parseIntC < 70)\n                dataResultColorC.push(\"rgb(255, 191, 0)\")\n              if (parseIntC > 70)\n                dataResultColorC.push(\"rgb(255, 64, 0)\")\n\n              dataResultColorC.push(\"rgb(0, 128, 255)\")\n              dataResultColorP.push(\"#c1c8e4\")\n              dataResultColorW.push(\"#0677a1\")\n            }\n\n          })\n          if (textResult !== checkValueReload) {\n            setValueReload(textResult)\n            setTxtHeader(headerList)\n            setDataChart(dataResultC)\n            setDataChartLine(dataResultP)\n            setDataChartLineW(dataResultW)\n            setDataChartColorC(dataResultColorC)\n            setDataChartColorP(dataResultColorP)\n            setDataChartColorW(dataResultColorW)\n          } else {\n            console.log(\"No change\")\n          }\n        })\n        .catch(function (err) {\n          //handle error\n          console.log(err)\n        });\n    }, 2000);\n\n    return () => clearInterval(interval);\n  }, [checkValueReload]);\n\n  console.log(\"checkObject\", checkObject)\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Grid container>\n          <Grid item xs={6} md={6}>\n            <div className='header'>\n              <h1 className='title'>CPUs</h1>\n            </div>\n            <Bar data={{\n              labels: txtHeader,\n              datasets: [\n                {\n                  label: 'C',\n                  data: dataChart,\n                  backgroundColor: dataChartColorC\n                },\n                {\n                  label: '%',\n                  data: dataChartLine,\n                  backgroundColor: dataChartColorP\n                },\n                {\n                  label: 'W',\n                  data: dataChartLineW,\n                  backgroundColor: dataChartColorW\n                },\n              ],\n            }} options={options} />\n          </Grid>\n\n          <Grid\n            item\n            xs={6}\n            md={6}\n            direction=\"column\"\n            justify=\"space-between\"\n            alignItems=\"center\"\n          >\n            <h1>{nameDetail}</h1>\n            <h1>{WDetail}</h1>\n            <h1>{KHDetail}</h1>\n          </Grid>\n        </Grid>\n        <Grid container >\n          {\n            txtHeader.map((data, index) => (\n              <Grid item xs={3} md={3} key={data + \"_\" + index}>\n                <div className='header'>\n                  <h1 className='title'>{data}</h1>\n                </div>\n                <Line\n                  data={{\n                    labels: checkObject[data].time,\n                    datasets: [\n                      {\n                        label: data,\n                        data: checkObject[data].data,\n                        fill: false,\n                        backgroundColor: 'rgb(255, 99, 132)',\n                        borderColor: 'rgba(255, 99, 132, 0.2)',\n                      },\n                    ]\n                  }}\n                  options={{\n                    scales: {\n                      yAxes: [\n                        {\n                          ticks: {\n                            beginAtZero: true,\n                          },\n                        },\n                      ],\n                    },\n                  }} />\n              </Grid>))\n          }\n        </Grid>\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}